CREATE TABLE person
(
    person_id   INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    name        VARCHAR2(20)                                                      NOT NULL,
    surname     VARCHAR2(20)                                                      NOT NULL,
    middle_name VARCHAR2(20),
    birthday    DATE                                                              NOT NULL,
    birthplace  VARCHAR2(100)                                                     NOT NULL,
    person_type VARCHAR2(20) CHECK ( person_type IN ('student', 'professor') ),
    position    VARCHAR2(20) CHECK (position IN ('docent', 'bachelor', 'master')) NOT NULL, -- должность MySQL
);

CREATE TABLE university -- университет Postgres
(
    university_id INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    name          VARCHAR2(100) NOT NULL -- название университета
);

CREATE TABLE department -- подразделение
(
    department_id INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    faculty       VARCHAR2(100) NOT NULL, -- Факультет -- Мегафакультет / Факультет учёбы (работы)
    -- fk from Postgres
    university_id INTEGER       NOT NULL REFERENCES university (university_id)
);

CREATE TABLE speciality -- специализация
(
    speciality_id INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    name          VARCHAR(100)  NOT NULL, /* название специальности -- 09.03.04 – Разработка программно-информационных систем (Академический магистр) */
    direction     VARCHAR2(100) NOT NULL, -- Направление -- 09.04.04 – Программная инженерия
    standard      VARCHAR(10)   NOT NULL, /* тип стандарта обучения -- старый/новый */
    department_id INTEGER       NOT NULL REFERENCES department (department_id)
);

CREATE TABLE discipline -- дисциплина
(
    discipline_id     INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    name              VARCHAR2(100) NOT NULL, -- название дисциплины
    -- below fields from Postgres
    lectures          INTEGER       NOT NULL, /* лекции: кол-во часов */
    practical_lessons INTEGER       NOT NULL, /* практические занятия: кол-во часов */
    labs              INTEGER       NOT NULL, /* лабораторные: кол-во часов */
    control_form      VARCHAR(10)   NOT NULL, /* форма контроля -- экзамен / зачёт */
    semester          INTEGER       NOT NULL, /* семестр */
    -- fk in Oracle and Postgres
    speciality_id     INTEGER       NOT NULL REFERENCES speciality (speciality_id)
);

CREATE TABLE grade -- оценка
(
    grade_id      INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    grade         INTEGER NOT NULL, /* баллы */
    grade_date    DATE    NOT NULL, -- дата получения
    person_id     INTEGER NOT NULL REFERENCES person (person_id),
    discipline_id INTEGER NOT NULL REFERENCES discipline (discipline_id),
    UNIQUE (person_id, discipline_id)
);

CREATE TABLE education -- учёба
(
    education_id   INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    education_type VARCHAR2(100) NOT NULL, -- вид обучения -- бюджет/контракт
    education_form VARCHAR2(100) NOT NULL, -- форма обучения -- очная/заочная
    qualification  VARCHAR2(100) NOT NULL, -- квалификация -- магистр
    start_date     DATE          NOT NULL, -- дата начала
    end_date       DATE,                   -- дата конца
    course         SMALLINT      NOT NULL, -- курс
    speciality_id  INTEGER       NOT NULL REFERENCES speciality (speciality_id),
    person_id      INTEGER       NOT NULL REFERENCES person (person_id)
);

CREATE TABLE work
(
    work_id    INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    position   VARCHAR2(20) NOT NULL, -- должность
    work_start DATE         NOT NULL, -- начало работы
    work_end   DATE,                  -- конец работы
    person_id  INTEGER      NOT NULL REFERENCES person (person_id)
);

CREATE TABLE work_discipline
(
    -- many to many от должности (работы) к дисциплинам
    work_id       INTEGER NOT NULL REFERENCES work (work_id),
    discipline_id INTEGER NOT NULL REFERENCES discipline (discipline_id),
    PRIMARY KEY (work_id, discipline_id)
);

CREATE TABLE schedule -- расписание
(
    schedule_id      INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    classroom        VARCHAR2(100), -- аудитория
    time_description VARCHAR2(200), -- время
    discipline_id    INTEGER REFERENCES discipline (discipline_id)
);

CREATE TABLE reader_list -- читательский лист MySQL
(
    list_id           INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    registration_date DATE           NOT NULL,                              -- дата регистрации
    person_id         INTEGER UNIQUE NOT NULL REFERENCES person (person_id) -- 1 to 1 to person
);

CREATE TABLE book -- книга MySQL
(
    book_id          INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    title            VARCHAR2(100) NOT NULL, -- название
    author           VARCHAR2(100) NOT NULL, -- автор
    publication_date DATE                    -- Дата публикации
);

CREATE TABLE reader_info -- many to many: чит. лист и книги MySQL
(
    info_id     INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    reader_id   INTEGER NOT NULL REFERENCES reader_list (list_id), -- человек
    book_id     INTEGER NOT NULL REFERENCES book (book_id),        -- взял книгу
    obtain_date DATE    NOT NULL,                                  -- когда взял
    returned    DATE                                               -- когда вернул
);

CREATE TABLE conference -- конференция MySQL
(
    conference_id   INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    title           VARCHAR2(100) NOT NULL, -- Наименование конференции
    place           VARCHAR2(100) NOT NULL, -- Место проведения конференции
    conference_date DATE          NOT NULL  -- Дата конференции
);

CREATE TABLE conference_participants -- участники конференции MySQL
(
    -- many to many from persons to conferences
    conference_id INTEGER NOT NULL REFERENCES conference (conference_id), -- конференция
    person_id     INTEGER NOT NULL REFERENCES person (person_id),         -- участник
    PRIMARY KEY (conference_id, person_id)
);

CREATE TABLE project -- проект MySQL
(
    project_id    INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    title         VARCHAR2(100) NOT NULL, -- Наименование научного проекта
    project_start DATE          NOT NULL, -- Период участия в проекте
    project_end   DATE
);

CREATE TABLE project_participants -- участники проекта MySQL
(
    -- many to many from persons to projects
    project_id INTEGER NOT NULL REFERENCES project (project_id), -- научный проект
    person_id  INTEGER NOT NULL REFERENCES person (person_id),   -- участник
    PRIMARY KEY (project_id, person_id)
);

CREATE TABLE publication -- публикация MySQL
(
    publication_id INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    title          VARCHAR(100) NOT NULL,                                -- Наименование публикации
    type           VARCHAR2(20) CHECK ( type IN ('article', 'theses') ), -- статья/тезисы
    citation_index INTEGER                                               -- Индекс цитирования
);

CREATE TABLE publication_coauthors -- соавторы публикации MySQL
(
    -- many to many from persons to publications
    publication_id INTEGER NOT NULL REFERENCES publication (publication_id), -- публикация
    person_id      INTEGER NOT NULL REFERENCES person (person_id),           -- соавтор
    PRIMARY KEY (publication_id, person_id)
);

CREATE TABLE edition -- издание MySQL
(
    edition_id     INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    title          VARCHAR2(100) NOT NULL, -- Наименование издания
    language       VARCHAR2(30)  NOT NULL, -- Язык издания
    volume         INTEGER       NOT NULL, -- Объём издания -- 5 листов
    place          VARCHAR2(100) NOT NULL, -- Место издания -- Тверь/Москва
    type           VARCHAR2(50)  NOT NULL, -- Тип издания -- вак, ринц ....
    publication_id INTEGER       NOT NULL REFERENCES publication (publication_id)
);

CREATE TABLE hostel -- общежитие Mongo
(
    hostel_id INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    address   VARCHAR2(100) NOT NULL, -- Местоположение -- пер. Вяземский, наб. р. Карповки
    rooms     INTEGER       NOT NULL  -- Количество комнат в здании
);

CREATE TABLE room -- комната Mongo
(
    room_id     INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    hostel_id   INTEGER NOT NULL REFERENCES hostel (hostel_id),
    room_number INTEGER NOT NULL, -- Номер комнаты
    capacity    INTEGER NOT NULL, -- Комната -- на 3 человека
    payment     INTEGER NOT NULL, -- Сумма оплаты
    insects     INTEGER NOT NULL  -- Клопы -- Y/N
);

CREATE TABLE disinfection -- дезинфекции Mongo (часть команты в Mongo)
(
    disinfection_id   INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    room_id           INTEGER NOT NULL REFERENCES room (room_id),
    disinfection_date DATE    NOT NULL -- Когда проводили дезинфекцию дата
);

CREATE TABLE accommodation -- проживание Mongo
(
    accommodation_id INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    person_id        INTEGER NOT NULL REFERENCES person (person_id),
    room_id          INTEGER NOT NULL REFERENCES room (room_id),
    acc_from         DATE    NOT NULL, -- Период с -- Живёт со 2 курса, то есть 01.09.2001-31.08.2002 2 курс
    acc_to           DATE,             -- Период по
    exemption        INTEGER NOT NULL  -- льготы -- Y/N
);

CREATE TABLE warning -- предупреждения Mongo (часть проживания в Mongo)
(
    warning_id       INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    accommodation_id INTEGER NOT NULL REFERENCES accommodation (accommodation_id),
    warning_date     DATE    NOT NULL,
    warn_text        VARCHAR2(500) -- причина
);

CREATE TABLE visit -- посещение Mongo
(
    visit_id  INTEGER GENERATED by default on null as IDENTITY PRIMARY KEY,
    person_id INTEGER NOT NULL REFERENCES person (person_id),
    hostel_id INTEGER NOT NULL REFERENCES hostel (hostel_id),
    inside    DATE, -- вошёл
    outside   DATE  -- вышел
);
